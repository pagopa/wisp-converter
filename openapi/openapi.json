{
  "openapi": "3.0.1",
  "info": {
    "description": "A service that permits to handle nodoInviaRPT and nodoInviaCarrelloRPT request from WISP, converting them in NMU payments.\n\n# OPERATIVE INFO\n\n\n## EVENT MAPPING IN RE\n\n<details><summary>Details</summary>\nFIELD | SCOPE | DESCRIPTION\n- | - | -\n**requestId** | BOTH | The identifier, set by X-Request-ID, from which the events can be grouped.\n**operationId** | BOTH | The identifier associated to a request identifier\n**clientOperationId** | BOTH | The identifier that associate a client to an operation identifier.\n**component** | BOTH | The applicative component from which the event is generated.<br>In NDP it is mapped with field 'componente'.<br>Values: <br>_WISP_SOAP_CONVERTER_<br>_WISP_CONVERTER_\n**insertedTimestamp** | BOTH | The time on which the event is inserted in RE storage\n**eventCategory** | BOTH | The category on which the event can be grouped.<br>In NDP it is mapped with field 'categoriaEvento'.<br>Values: <br>_INTERFACE_<br>_INTERNAL_\n**eventSubcategory** | BOTH | The subcategory related to the specific nature of the event.<br>In NDP it is mapped with field 'sottoTipoEvento'.<br>Values: <br>_REQ_<br>_RESP_<br>_INTERN_\n**callType** | INTERFACE | The type of role that the application has in the communication with the remote endpoint.<br>Values: <br>_SERVER_<br>_CLIENT_\n**outcome** | INTERFACE | The outcome of the operation described by the event.<br>In NDP it is mapped with field 'esito'.<br>Values: <br>_SEND_: Correctly sent request to HTTP endpoint. In NDP it is mapped with value 'INVIATA'.<br>_SEND_FAILURE_: Failed to send request to HTTP endpoint. In NDP it is mapped with value 'INVIATA_KO'<br>_RECEIVED_: Received an OK response from HTTP endpoint. In NDP it is mapped with value 'RICEVUTA_KO'<br>_RECEIVED_FAILURE_: Received a failure response from endpoint. In NDP it is mapped with value 'RICEVUTA_KO'<br>_NEVER_RECEIVED_: Failed to receive response at all from endpoint. In NDP it is mapped with value 'NO_RICEVUTA'<br>_EXECUTED_INTERNAL_STEP_: Executed internal step on execution. In NDP it is mapped with value 'CAMBIO_STATO'\n**httpMethod** | INTERFACE | The HTTP method of the endpoint related to the event.<br>This field is set only if the events that describe an HTTP communication with an external service.\n**httpUri** | INTERFACE | The URI related to the called endpoint.<br>This field is set only if the events that describe an HTTP communication with an external service.\n**httpHeaders** | INTERFACE | The list of HTTP headers extracted from the request/response analyzed by the event.<br>This field is set only if the events that describe an HTTP communication with an external service.\n**httpCallRemoteAddress** | INTERFACE | The remote IP address extracted from the called endpoint.<br>This field is set only if the events that describe an HTTP communication with an external service.\n**httpStatusCode** | INTERFACE | The status code extracted from the called endpoint.<br>This field is set only if the events that describe an HTTP communication with an external service.\n**executionTimeMs** | INTERFACE | The duration time of the invocation of the endpoint related to the event.<br>This field is set only if the events that describe an HTTP communication with an external service.\n**compressedPayload** | INTERFACE | The payload of the request/response analyzed by the event.<br>This value is zipped using GZip compression algorithm.\n**compressedPayloadLength** | INTERFACE | The length (in number of characters) of the compressed payload.\n**businessProcess** | INTERFACE | The descriptive label associated to the endpoint called by user and related to the whole process.\n**operationStatus** | INTERFACE | The final status of the whole operation.<br>This is set only in the events that describe the response in output to user.\n**operationErrorTitle** | INTERFACE | The error title extracted from the computation that refers to the error occurred during computation.<br>This is set only in the events that describe the response in output to user if there is an error.\n**operationErrorDetail** | INTERFACE | The error detail message extracted from the computation that refers to the error occurred during computation.<br>This is set only in the events that describe the response in output to user if there is an error.\n**operationErrorCode** | INTERFACE | The error code extracted from the computation that refers to the error occurred during computation.<br>This is set only in the events that describe the response in output to user if there is an error.\n**primitive** | INTERNAL | The typology of primitive analyzed and tracked by the event.<br>In NDP it is mapped with field 'eventType'.\n**sessionId** | INTERNAL | The session identifier generated by WISP SOAP Converter and used in the request.\n**cartId** | INTERNAL | The cart identifier used in the request.\n**iuv** | INTERNAL | The 'identificativo univoco pagamento' used in the request.\n**noticeNumber** | INTERNAL | The notice number (aka NAV code) used in the request.\n**domainId** | INTERNAL | The creditor institution identifier used in the request.\n**ccp** | INTERNAL | The 'codice contesto pagamento' used in the request.\n**psp** | INTERNAL | The payment service provider used in the request.\n**station** | INTERNAL | The station used in the request.\n**channel** | INTERNAL | The channel used in the request.\n**status** | INTERNAL | The state of the internal step executed.<br>Values: <br>_FOUND_RPT_IN_STORAGE_<br>_FOUND_RT_IN_STORAGE_<br>_EXTRACTED_DATA_FROM_RPT_<br>_CREATED_NEW_PAYMENT_POSITION_IN_GPD_<br>_GENERATED_NAV_FOR_NEW_PAYMENT_POSITION_<br>_UPDATED_EXISTING_PAYMENT_POSITION_IN_GPD_<br>_GENERATING_RT_FOR_INVALID_PAYMENT_POSITION_IN_GPD_<br>_GENERATING_RT_FOR_GPD_EXCEPTION_<br>_GENERATING_RT_FOR_REDIRECT_ERROR_<br>_GENERATED_CACHE_ABOUT_RPT_FOR_DECOUPLER_<br>_GENERATED_CACHE_ABOUT_RPT_FOR_CARTSESSION_CACHING_<br>_GENERATED_CACHE_ABOUT_RPT_FOR_RT_GENERATION_<br>_SAVED_RPT_IN_CART_RECEIVED_REDIRECT_URL_FROM_CHECKOUT_<br>_RT_NOT_GENERABLE_FOR_GPD_STATION_<br>_RT_NOT_GENERABLE_FOR_NOT_EXISTING_PAYMENT_POSITION_<br>_NEGATIVE_RT_TRY_TO_SEND_TO_CREDITOR_INSTITUTION_<br>_POSITIVE_RT_TRY_TO_SEND_TO_CREDITOR_INSTITUTION_<br>_RT_SEND_SUCCESS_<br>_RT_SENT_OK_<br>_RT_SEND_FAILURE_<br>_RT_ALREADY_SENT_<br>_RT_SEND_SCHEDULING_SUCCESS_<br>_RT_SEND_SCHEDULING_FAILURE_<br>_RT_SCHEDULED_SEND_SUCCESS_<br>_RT_SCHEDULED_SEND_FAILURE_<br>_RT_SEND_RESCHEDULING_FAILURE_<br>_RT_SEND_RESCHEDULING_REACHED_MAX_RETRIES_<br>_RT_SEND_RESCHEDULING_SUCCESS_<br>_RT_RECONCILIATION_PROCESS_<br>_RT_START_RECONCILIATION_PROCESS_<br>_RT_END_RECONCILIATION_PROCESS_<br>_RT_DEAD_LETTER_SAVED_<br>_RT_DEAD_LETTER_FAILED_<br>_RECEIPT_TIMER_GENERATION_CREATED_SCHEDULED_SEND_<br>_RECEIPT_TIMER_GENERATION_CACHED_SEQUENCE_NUMBER_<br>_RECEIPT_TIMER_GENERATION_DELETED_SCHEDULED_SEND_<br>_RECEIPT_TIMER_GENERATION_SKIP_DELETE_SCHEDULED_SEND_<br>_RECEIPT_TIMER_PAYMENT_TOKEN_TIMEOUT_TRIGGER_<br>_ECOMMERCE_HANG_TIMER_TRIGGER_<br>_ECOMMERCE_HANG_TIMER_CREATED_<br>_ECOMMERCE_HANG_TIMER_DELETED_<br>_RPT_TIMER_TRIGGER_<br>_RPT_TIMER_CREATED_<br>_RPT_TIMER_DELETED_<br>_RPT_TIMER_NOT_SET_<br>_COMMUNICATING_WITH_GPD_REQUEST_<br>_COMMUNICATING_WITH_GPD_RESPONSE_<br>_COMMUNICATING_WITH_IUV_GENERATOR_REQUEST_<br>_COMMUNICATING_WITH_IUV_GENERATOR_RESPONSE_<br>_COMMUNICATING_WITH_CHECKOUT_REQUEST_<br>_COMMUNICATING_WITH_CHECKOUT_RESPONSE_<br>_COMMUNICATING_WITH_DECOUPLER_CACHING_REQUEST_<br>_COMMUNICATING_WITH_DECOUPLER_CACHING_RESPONSE_<br>_COMMUNICATING_WITH_CREDITOR_INSTITUTION_REQUEST_<br>_COMMUNICATING_WITH_CREDITOR_INSTITUTION_RESPONSE_\n**info** | INTERNAL | The other information that can be inserted for the tracing.\n**paymentToken** | INTERNAL | The payment token.\n\n</details>\n\n\n## OPERATIONAL ERROR CODES\n\n<details><summary>Details</summary>\nNAME | CODE | DESCRIPTION\n- | - | -\n**WIC-500** | *ERROR* | A not documented generic error occurred while execution. For better understanding the cause, please use the Technical Support's APIs.\n**WIC-1000** | *GENERIC_ERROR* | A generic error occurred while executing conversion flow. For better understanding the cause, please use the Technical Support's APIs.\n**WIC-1001** | *PARSING_GENERIC_ERROR* | A generic error occurred while parsing of the content associated to the SOAP request related to nodoInviaRPT or nodoInviaCarrelloRPT. For better understanding the cause, please use the Technical Support's APIs.\n**WIC-1002** | *PARSING_INVALID_HEADER* | An error occurred while parsing of the content header, associated to the SOAP request related to nodoInviaRPT or nodoInviaCarrelloRPT.\n**WIC-1003** | *PARSING_INVALID_BODY* | An error occurred while parsing of the content payload, associated to the SOAP request related to nodoInviaRPT or nodoInviaCarrelloRPT.\n**WIC-1004** | *PARSING_INVALID_XML_NODES* | An error occurred while parsing of the of the content associated to the SOAP request related to nodoInviaRPT or nodoInviaCarrelloRPT. The XML content extracted, either from payload or from header, is invalid because it is not possible to extract tag nodes from document. So, the document is probably empty.\n**WIC-1005** | *PARSING_INVALID_ZIPPED_PAYLOAD* | An error occurred while parsing of the content associated to the SOAP request related to nodoInviaRPT or nodoInviaCarrelloRPT. The SOAP request analyzed and stored in dedicated storage is not usable for convert the debt positions in GPD system. This is probably due to an invalid conversion of the SOAP request via GZip algorithm executed before the same is stored in its storage.\n**WIC-1006** | *PARSING_RPT_PRIMITIVE_NOT_VALID* | An error occurred while parsing of the content associated to the SOAP request related to nodoInviaRPT or nodoInviaCarrelloRPT. The primitive (the content related to header 'soapaction') cannot be handled by WISP Converter application in redirect process: only one of nodoInviaRPT and nodoInviaCarrelloRPT can be accepted.\n**WIC-1100** | *VALIDATION_INVALID_MULTIBENEFICIARY_CART* | An error occurred while analyzing the RPTs extracted from SOAP request. In particular, the request is arrived as nodoInviaCarrelloRPT as multi-beneficiary cart, but the number of RPTs in the request is lower than two, so it cannot be correctly handled as multi-beneficiary.\n**WIC-1101** | *VALIDATION_INVALID_IBANS* | An error occurred while analyzing the RPTs extracted from SOAP request. An IBAN must always be set in RPT transfers if they aren't related to digital stamps (which don't require an IBAN, because they will be reported to specific subject). In this case, in one or more RPT transfers not related to digital stamp, the IBAN is not correctly set.\n**WIC-1102** | *VALIDATION_INVALID_DEBTOR* | An error occurred while analyzing the RPTs extracted from SOAP request. In particular, in a cart there are different debtor subjects and this is not permitted for this flow. So, the whole cart is discarded.\n**WIC-1200** | *CONFIGURATION_INVALID_CACHE* | An error occurred while trying to access data from cached configuration. It is possible that the cache is not retrieved yet by this service or a corrupted configuration was returned from APIConfig Cache internal service. If this problem still occurs, please check the connectivity with APIConfig Cache.\n**WIC-1201** | *CONFIGURATION_INVALID_STATION* | An error occurred while retrieving data from local cached configuration. In particular, it is not possible to retrieve the configuration about the station because it does not exists in cache, and maybe also in general configuration. So, a change in whole configuration and/or a refresh on cache is required.\n**WIC-1202** | *CONFIGURATION_INVALID_CREDITOR_INSTITUTION_STATION* | An error occurred while checking the station that will be used for the payment process. In particular, analyzing the station that is related to the segregation code extracted from a payment option's notice number, it turns out that the required station does not exists in cached configuration. So, a change in whole configuration and/or a refresh on cache is required.\n**WIC-1203** | *CONFIGURATION_INVALID_STATION_REDIRECT_URL* | An error occurred while checking the station that will be used for the payment process. In particular, analyzing the station that is related to the segregation code extracted from a payment option's notice number, it turns out that the configuration about redirection in error cases is not correctly set to points towards some creditor institution's endpoint. So, a change in configuration is required.\n**WIC-1204** | *CONFIGURATION_INVALID_STATION_SERVICE_URL* | An error occurred while checking the station that will be used for the payment process. In particular, analyzing the station that is related to the segregation code extracted from a payment option's notice number, it turns out that the configuration is not correctly set to points towards GPD service endpoint for RT generator. So, a change in configuration is required.\n**WIC-1205** | *CONFIGURATION_NOT_GPD_STATION* | An error occurred while checking the station that will be used for the payment process. In particular, analyzing the station that is related to the segregation code extracted from a payment option's notice number, it turns out that the configuration is not correctly set to points towards GPD service endpoint. So, a change in configuration is required.\n**WIC-1206** | *CONFIGURATION_INVALID_GPD_STATION* | An error occurred while checking the station that will be used for the payment process. In particular, analyzing the station that is related to the segregation code extracted from a payment option's notice number, it turns out that the configuration is correctly set to points towards GPD service endpoint but uses the 'v1' primitive version (and it must use the 'v2' version). So, a change in configuration is required.\n**WIC-1207** | *CONFIGURATION_INVALID_STATION_PROXY* | An error occurred while checking the station that will be used for the receipt send process. In particular, analyzing the station it turns out that the configuration is not correctly set to configure proxy structure for RT generator. So, a change in configuration is required.\n**WIC-1300** | *PAYMENT_POSITION_NOT_IN_PAYABLE_STATE* | An error occurred while checking an existing payment position. One or more RPTs extracted from the request refers to existing payment positions in GPD that have a state from which it is impossible to execute a payment flow. If the execution of this flow is related to a RPT cart, all the payments that can be retrieved or generated ex novo from those RPTs are declared as atomically invalid (if one RPT in cart is bad, all RPTs in cart are bad) and not payable with this flow.\n**WIC-1301** | *PAYMENT_POSITION_IN_INCONSISTENT_STATE* | An error occurred while checking an existing payment position in GPD system. The retrieved payment position, previously inserted in GPD by this same flow or by other procedures, is in an invalid state, not mappable to an existing value. This can be related to a wrong setting in GPD or a corruption of the retrieved data.\n**WIC-1302** | *PAYMENT_POSITION_NOT_VALID* | An error occurred while generating a payment position. In particular, something during the generation of a new payment position or the analysis of an existing payment position went wrong and the operation cannot be completed.  For better understanding the cause, please use the Technical Support's APIs.\n**WIC-1303** | *PAYMENT_OPTION_NOT_EXTRACTABLE* | An error occurred while extracting a payment option from a payment position. This can be caused by a malformed payment position that does not have a payment option. Remember that a payment position in this flow must have one and only one payment option.\n**WIC-1400** | *RECEIPT_GENERATION_GENERIC_ERROR* | An error occurred while generating an RT (aka a receipt). An unhandled error occurred and it is impossible to complete the process. For better understanding the cause, please use the Technical Support's APIs.\n**WIC-1401** | *RECEIPT_GENERATION_WRONG_RESPONSE_FROM_CREDITOR_INSTITUTION* | An error occurred while generating an RT (aka a receipt). Specifically, the RT request is sent to creditor institution but this one responded with an invalid response from which is impossible to continue the analysis. For better understanding the cause, please use the Technical Support's APIs.\n**WIC-1402** | *RECEIPT_GENERATION_ERROR_RESPONSE_FROM_CREDITOR_INSTITUTION* | An error occurred while generating an RT (aka a receipt). Specifically, the RT request is sent to creditor institution but this one responded with an error response that explicit the occurred problem. For better understanding the cause, please use the Technical Support's APIs.\n**WIC-1403** | *RECEIPT_KO_NOT_SENT* | An error occurred while sending a negative RT (aka a KO receipt). So, no receipt can be sent lately to creditor institution and probably the process must be executed manually. For better understanding the cause, please use the Technical Support's APIs.\n**WIC-1404** | *RECEIPT_OK_NOT_SENT* | An error occurred while sending a positive RT (aka a OK receipt). So, no receipt can be sent lately to creditor institution and probably the process must be executed manually. For better understanding the cause, please use the Technical Support's APIs.\n**WIC-1405** | *RECEIPT_GENERATION_IDEMPOTENCY_LOCKED_BY_ANOTHER_PROCESS* | An error occurred while generating an RT (aka a receipt). Two or more generation processes are concurrently trying to execute the same operation on the same receipt but only one of them is currently 'authorized' to do so.\n**WIC-1406** | *RECEIPT_GENERATION_NOT_PROCESSABLE* | An error occurred while generating an RT (aka a receipt). The process of receipt generation cannot be started correctly because it is trying to lock the idempotency key that is already in a locked state. Probably the process is in execution by another thread.\n**WIC-1407** | *RECEIPT_GENERATION_ALREADY_PROCESSED* | An error occurred while generating an RT (aka a receipt). The process of receipt generation cannot be completed correctly because it is trying to unlock the idempotency key that is not in a locked state. Probably the process was already completed.\n**WIC-1408** | *RECEIPT_GENERATION_ANOMALY_ON_PROCESSING* | An error occurred while generating an RT (aka a receipt). The process of receipt generation cannot be completed correctly because there is a mismatch between the type of the cached receipt and the kind of request made for generate the same receipt. For example, the cached receipt is defined as negative paaInviaRT but the request was made to 'receipt/ok' endpoint. This is an anomaly that should never happens in a correct NMU flow execution but must be traced in case of error.\n**WIC-1409** | *RECEIPT_KO_NOT_GENERATED_BUT_MAYBE_RESCHEDULED* | An error occurred while generating a negative RT (aka a KO receipt). The receipt could be sent lately to creditor institution but for better understanding the cause, please use the Technical Support's APIs.\n**WIC-1410** | *RECEIPT_OK_NOT_GENERATED_BUT_MAYBE_RESCHEDULED* | An error occurred while generating a positive RT (aka a OK receipt). The receipt could be sent lately to creditor institution but for better understanding the cause, please use the Technical Support's APIs.\n**WIC-1411** | *RECEIPT_GENERATION_ERROR_DEAD_LETTER* | An error occurred while generating an RT (aka a receipt). Specifically, the creditor institution response status has not been recognized, for this reason the RT has been placed in the dead letter container.\n**WIC-2000** | *PERSISTENCE_SAVING_RE_ERROR* | An error occurred wile trying to store a new event in the Registro Eventi storage. The error is somewhat related to a persistence problem of the used storage and in the majority of the cases is temporary (maybe a 429 HTTP code). This error currently blocks the entire flow because that can lead to untraceable requests. For better understanding the cause, please execute a search in the log provider (Application Insights, Kibana, etc).\n**WIC-2001** | *PERSISTENCE_RPT_NOT_FOUND* | An error occurred while trying to retrieve the RPT content saved in storage by WISP SOAP Converter. This can be related either with the use of a wrong sessionId or a missed persistence from WISP SOAP Converter, so it is better to analyze the entire flow using Technical Support's APIs. This block totally the conversion of the RPTs in GPD's payment positions, so the whole process is discarded.\n**WIC-2002** | *PERSISTENCE_RT_NOT_FOUND* | An error occurred while trying to retrieve the RT content saved in storage by WISP Converter. This can be related either with the use of a wrong identifier, a missed persistence or an expired object, so it is better to analyze the entire flow using Technical Support's APIs.\n**WIC-2003** | *PERSISTENCE_REQUESTID_CACHING_ERROR* | An error occurred while trying to retrieve data from internal cache. Specifically, the cached key, defined in format wisp_nav2iuv_<domainId>_<nav> needed for RT generation, was not found. This missing read invalidates the entire process of the RT generation.\n**WIC-2004** | *PERSISTENCE_SERVICE_BUS_CANCEL_ERROR* | An error occurred while communicating with Service Bus for cancel scheduled message related to timer timeout\n**WIC-2005** | *PERSISTENCE_MAPPING_NAV_TO_IUV_ERROR* | An error occurred while trying to retrieve data from internal cache. Specifically, the cached key, defined in format wisp_nav2iuv_<domainId>_<nav> needed for RT generation is corrupted in some way, because it is not possible to extract 'domainId' or 'nav' correctly. This wrong read invalidates the entire process of the RT generation.\n**WIC-2006** | *CONFIGURATION_NOT_FOUND* | An error occured while retrieving the configuration. Check the input string and if the configuration is present or not\n**WIC-3000** | *CLIENT_APICONFIGCACHE* | An error occurred while communicating with APIConfig Cache backend internal service in order to retrieve the last generated cache. It can be related to any client problem, so the best way to handle this is to use the Technical Support's APIs in order to find the cause.\n**WIC-3001** | *CLIENT_GPD* | An error occurred while communicating with GPD backend services in order to execute a specific operation on payment position. It can be related to any client problem and to any particular operation, so the best way to handle this is to use the Technical Support's APIs in order to find the cause.\n**WIC-3002** | *CLIENT_IUVGENERATOR* | An error occurred while communicating with IUV Generator backend internal service in order to retrieve a newly generated NAV code to be used to the new payment position to send in GPD system. It can be related to any client problem, so the best way to handle this is to use the Technical Support's APIs in order to find the cause.\n**WIC-3003** | *CLIENT_DECOUPLER_CACHING* | An error occurred while communicating with an internal service endpoint dedicated to storing internal cache for route requests in Decoupler. It can be related to any client problem, so the best way to handle this is to use the Technical Support's APIs in order to find the cause.\n**WIC-3004** | *CLIENT_CHECKOUT* | An error occurred while communicating with Checkout backend internal service in order to send a request about the cart creation. It can be related to any client problem, so the best way to handle this is to use the Technical Support's APIs in order to find the cause.\n**WIC-3005** | *CLIENT_PAAINVIART* | An error occurred while communicating with the creditor institution's station (external service) in order to sending of a paaInviaRT request. It can be related to any client problem, so the best way to handle this is to use the Technical Support's APIs in order to find the cause.\n**WIC-3006** | *CLIENT_CARTSESSION_CACHING* | An error occurred while communicating with an internal service endpoint dedicated to storing internal cache for handle unique session on cart. It can be related to any client problem, so the best way to handle this is to use the Technical Support's APIs in order to find the cause.\n\n</details>\n",
    "termsOfService": "https://www.pagopa.gov.it/",
    "title": "WISP Converter",
    "version": "1.0.6-4-release-v1.0.7"
  },
  "servers": [
    {
      "url": "http://localhost",
      "description": "Generated server url"
    }
  ],
  "tags": [
    {
      "description": "Application info APIs",
      "name": "Home"
    },
    {
      "description": "Create and Delete payment token timer",
      "name": "ReceiptTimer"
    },
    {
      "description": "ECs and Stations configuration",
      "name": "Configuration"
    },
    {
      "description": "Convert sendPaymentResultV2, closePaymentV2 or paSendRTV2 into paaInviaRT to EC",
      "name": "Receipt"
    },
    {
      "description": "Create and Delete rpt timer",
      "name": "RPTTimer"
    },
    {
      "description": "Conversion and redirection APIs",
      "name": "Redirect"
    },
    {
      "description": "Recovery and reconciliation APIs",
      "name": "Recovery"
    }
  ],
  "paths": {
    "/info": {
      "get": {
        "operationId": "healthCheck",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppInfoResponse"
                }
              }
            },
            "description": "OK.",
            "headers": {
              "X-Request-Id": {
                "description": "This header identifies the call",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "Return OK if application is started",
        "tags": [
          "Home"
        ]
      },
      "parameters": [
        {
          "description": "This header identifies the call, if not passed it is self-generated. This ID is returned in the response.",
          "in": "header",
          "name": "X-Request-Id",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/payments": {
      "get": {
        "operationId": "redirect",
        "parameters": [
          {
            "example": "identificativoIntermediarioPA_sessionId",
            "in": "query",
            "name": "idSession",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "302": {
            "description": "Redirect to Checkout service.",
            "headers": {
              "X-Request-Id": {
                "description": "This header identifies the call",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "tags": [
          "Redirect"
        ]
      },
      "parameters": [
        {
          "description": "This header identifies the call, if not passed it is self-generated. This ID is returned in the response.",
          "in": "header",
          "name": "X-Request-Id",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/receipt": {
      "get": {
        "operationId": "receiptRetrieve",
        "parameters": [
          {
            "in": "query",
            "name": "ci",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "ccp",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "iuv",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Receipt exists",
            "headers": {
              "X-Request-Id": {
                "description": "This header identifies the call",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "tags": [
          "Receipt"
        ]
      },
      "parameters": [
        {
          "description": "This header identifies the call, if not passed it is self-generated. This ID is returned in the response.",
          "in": "header",
          "name": "X-Request-Id",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/receipt/ko": {
      "parameters": [
        {
          "description": "This header identifies the call, if not passed it is self-generated. This ID is returned in the response.",
          "in": "header",
          "name": "X-Request-Id",
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "operationId": "receiptKo",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully forwarded negative paaInviaRT to EC",
            "headers": {
              "X-Request-Id": {
                "description": "This header identifies the call",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "tags": [
          "Receipt"
        ]
      }
    },
    "/receipt/ok": {
      "parameters": [
        {
          "description": "This header identifies the call, if not passed it is self-generated. This ID is returned in the response.",
          "in": "header",
          "name": "X-Request-Id",
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "operationId": "receiptOk",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReceiptRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully forwarded positive paaInviaRT to EC",
            "headers": {
              "X-Request-Id": {
                "description": "This header identifies the call",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "tags": [
          "Receipt"
        ]
      }
    },
    "/receipt/timer": {
      "delete": {
        "description": "Delete a timer by paymentToken",
        "operationId": "deleteTimer_1",
        "parameters": [
          {
            "in": "query",
            "name": "paymentTokens",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully paymentToken expiration timer deleted",
            "headers": {
              "X-Request-Id": {
                "description": "This header identifies the call",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "deleteTimer",
        "tags": [
          "ReceiptTimer"
        ]
      },
      "parameters": [
        {
          "description": "This header identifies the call, if not passed it is self-generated. This ID is returned in the response.",
          "in": "header",
          "name": "X-Request-Id",
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Create a timer linked with paymentToken and receipt data",
        "operationId": "createTimer_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReceiptTimerRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully paymentToken expiration timer created",
            "headers": {
              "X-Request-Id": {
                "description": "This header identifies the call",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "createTimer",
        "tags": [
          "ReceiptTimer"
        ]
      }
    },
    "/recovery/partitions": {
      "parameters": [
        {
          "description": "This header identifies the call, if not passed it is self-generated. This ID is returned in the response.",
          "in": "header",
          "name": "X-Request-Id",
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Execute reconciliation of all receipts contained in the partitions of the request",
        "operationId": "recoverReceiptToBeReSentByPartition",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecoveryReceiptByPartitionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RecoveryReceiptReportResponse"
                }
              }
            },
            "description": "Reconciliation scheduled",
            "headers": {
              "X-Request-Id": {
                "description": "This header identifies the call",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "Execute reconciliation for passed receipts by partition.",
        "tags": [
          "Recovery"
        ]
      }
    },
    "/recovery/receipts": {
      "parameters": [
        {
          "description": "This header identifies the call, if not passed it is self-generated. This ID is returned in the response.",
          "in": "header",
          "name": "X-Request-Id",
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Execute reconciliation of all receipts in the request, searching by passed identifier",
        "operationId": "recoverReceiptToBeReSent",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecoveryReceiptRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RecoveryReceiptReportResponse"
                }
              }
            },
            "description": "Reconciliation scheduled",
            "headers": {
              "X-Request-Id": {
                "description": "This header identifies the call",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "Execute reconciliation for passed receipts.",
        "tags": [
          "Recovery"
        ]
      }
    },
    "/recovery/sessionIds/ko": {
      "parameters": [
        {
          "description": "This header identifies the call, if not passed it is self-generated. This ID is returned in the response.",
          "in": "header",
          "name": "X-Request-Id",
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Execute reconciliation of all KO receipts related to the sessionIds of the request",
        "operationId": "recoverKoReceiptToBeReSentBySessionId",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecoveryReceiptBySessionIdRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Reconciliation scheduled",
            "headers": {
              "X-Request-Id": {
                "description": "This header identifies the call",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "Execute reconciliation for KO receipts by sessionId.",
        "tags": [
          "Recovery"
        ]
      }
    },
    "/recovery/sessionIds/ok": {
      "parameters": [
        {
          "description": "This header identifies the call, if not passed it is self-generated. This ID is returned in the response.",
          "in": "header",
          "name": "X-Request-Id",
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Execute reconciliation of all OK receipts related to the sessionIds of the request",
        "operationId": "recoverOkReceiptToBeReSentBySessionId",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecoveryReceiptBySessionIdRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RecoveryReceiptReportResponse"
                }
              }
            },
            "description": "Reconciliation scheduled",
            "headers": {
              "X-Request-Id": {
                "description": "This header identifies the call",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "Execute reconciliation for OK receipts by sessionId.",
        "tags": [
          "Recovery"
        ]
      }
    },
    "/recovery/{creditor_institution}/receipt-ko": {
      "parameters": [
        {
          "description": "This header identifies the call, if not passed it is self-generated. This ID is returned in the response.",
          "in": "header",
          "name": "X-Request-Id",
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Execute reconciliation of all IUVs for certain creditor institution, sending RT for close payment.",
        "operationId": "recoverReceiptKOForCreditorInstitution",
        "parameters": [
          {
            "in": "path",
            "name": "creditor_institution",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dateFrom",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dateTo",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RecoveryReceiptResponse"
                }
              }
            },
            "description": "Started reconciling IUVs with explicit RT send",
            "headers": {
              "X-Request-Id": {
                "description": "This header identifies the call",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "Execute IUV reconciliation for certain creditor institution.",
        "tags": [
          "Recovery"
        ]
      }
    },
    "/recovery/{creditor_institution}/rpt/{iuv}/receipt-ko": {
      "parameters": [
        {
          "description": "This header identifies the call, if not passed it is self-generated. This ID is returned in the response.",
          "in": "header",
          "name": "X-Request-Id",
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Execute reconciliation of all IUVs for certain creditor institution, sending RT for close payment.",
        "operationId": "recoverReceiptKOForCreditorInstitutionAndIUV",
        "parameters": [
          {
            "in": "path",
            "name": "creditor_institution",
            "required": true,
            "schema": {
              "pattern": "[a-zA-Z0-9_-]{1,100}",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "iuv",
            "required": true,
            "schema": {
              "pattern": "[a-zA-Z0-9_-]{1,100}",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dateFrom",
            "required": true,
            "schema": {
              "pattern": "[a-zA-Z0-9_-]{1,10}",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dateTo",
            "required": true,
            "schema": {
              "pattern": "[a-zA-Z0-9_-]{1,10}",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RecoveryReceiptResponse"
                }
              }
            },
            "description": "Completed IUV reconciliation with explicit RT submission",
            "headers": {
              "X-Request-Id": {
                "description": "This header identifies the call",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RecoveryReceiptResponse"
                }
              }
            },
            "description": "It is not possible to complete reconciliation (with explicit RT submission) for the submitted UIV",
            "headers": {
              "X-Request-Id": {
                "description": "This header identifies the call",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "Execute IUV reconciliation for certain creditor institution.",
        "tags": [
          "Recovery"
        ]
      }
    },
    "/rpt/timer": {
      "delete": {
        "description": "Delete a timer by sessionId",
        "operationId": "deleteTimer",
        "parameters": [
          {
            "in": "query",
            "name": "sessionId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully rpt timer deleted",
            "headers": {
              "X-Request-Id": {
                "description": "This header identifies the call",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "deleteRPTTimer",
        "tags": [
          "RPTTimer"
        ]
      },
      "parameters": [
        {
          "description": "This header identifies the call, if not passed it is self-generated. This ID is returned in the response.",
          "in": "header",
          "name": "X-Request-Id",
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Create a timer from sessionId data",
        "operationId": "createTimer",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RPTTimerRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully rpt timer created",
            "headers": {
              "X-Request-Id": {
                "description": "This header identifies the call",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "createRPTTimer",
        "tags": [
          "RPTTimer"
        ]
      }
    },
    "/whitelist/cis": {
      "get": {
        "operationId": "getCreditorInstitutions",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationModel"
                }
              }
            },
            "description": "Configuration for EC retrieved.",
            "headers": {
              "X-Request-Id": {
                "description": "This header identifies the call",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationModel"
                }
              }
            },
            "description": "Configuration for EC not found.",
            "headers": {
              "X-Request-Id": {
                "description": "This header identifies the call",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "Return the string containing all creditor institutions for the wisp converter logic",
        "tags": [
          "Configuration"
        ]
      },
      "parameters": [
        {
          "description": "This header identifies the call, if not passed it is self-generated. This ID is returned in the response.",
          "in": "header",
          "name": "X-Request-Id",
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "operationId": "createCreditorInstitutionsConfiguration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigurationModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "headers": {
              "X-Request-Id": {
                "description": "This header identifies the call",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "headers": {
              "X-Request-Id": {
                "description": "This header identifies the call",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "Create the string containing all creditor institutions for the wisp converter logic",
        "tags": [
          "Configuration"
        ]
      }
    },
    "/whitelist/stations": {
      "get": {
        "operationId": "getStations",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationModel"
                }
              }
            },
            "description": "Configuration for Stations retrieved.",
            "headers": {
              "X-Request-Id": {
                "description": "This header identifies the call",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationModel"
                }
              }
            },
            "description": "Configuration for Stations not found.",
            "headers": {
              "X-Request-Id": {
                "description": "This header identifies the call",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "Return the string containing all stations for the wisp converter logic",
        "tags": [
          "Configuration"
        ]
      },
      "parameters": [
        {
          "description": "This header identifies the call, if not passed it is self-generated. This ID is returned in the response.",
          "in": "header",
          "name": "X-Request-Id",
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "operationId": "createStationsConfiguration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigurationModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "headers": {
              "X-Request-Id": {
                "description": "This header identifies the call",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "headers": {
              "X-Request-Id": {
                "description": "This header identifies the call",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "Create the string containing all stations for the wisp converter logic",
        "tags": [
          "Configuration"
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "AppInfoResponse": {
        "type": "object",
        "properties": {
          "environment": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "ConfigurationModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          }
        }
      },
      "PairStringString": {
        "type": "object",
        "properties": {
          "first": {
            "type": "string"
          },
          "second": {
            "type": "string"
          }
        }
      },
      "RPTTimerRequest": {
        "type": "object",
        "properties": {
          "sessionId": {
            "type": "string"
          }
        }
      },
      "ReceiptRequest": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string"
          }
        }
      },
      "ReceiptTimerRequest": {
        "type": "object",
        "properties": {
          "expirationTime": {
            "type": "integer",
            "format": "int64"
          },
          "fiscalCode": {
            "pattern": "\\w*",
            "type": "string"
          },
          "noticeNumber": {
            "pattern": "\\d*",
            "type": "string"
          },
          "paymentToken": {
            "type": "string"
          },
          "sessionId": {
            "type": "string"
          }
        }
      },
      "RecoveryReceiptByPartitionRequest": {
        "type": "object",
        "properties": {
          "partitionKeys": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RecoveryReceiptBySessionIdRequest": {
        "type": "object",
        "properties": {
          "sessionIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RecoveryReceiptPaymentResponse": {
        "type": "object",
        "properties": {
          "ccp": {
            "type": "string"
          },
          "ci": {
            "type": "string"
          },
          "iuv": {
            "type": "string"
          }
        }
      },
      "RecoveryReceiptReportResponse": {
        "type": "object",
        "properties": {
          "receiptStatus": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PairStringString"
            }
          }
        }
      },
      "RecoveryReceiptRequest": {
        "type": "object",
        "properties": {
          "receiptIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RecoveryReceiptResponse": {
        "type": "object",
        "properties": {
          "payments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecoveryReceiptPaymentResponse"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "ApiKey": {
        "description": "The API key to access this function app.",
        "in": "header",
        "name": "Ocp-Apim-Subscription-Key",
        "type": "apiKey"
      }
    }
  }
}
